{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Excell Employee Application","text":""},{"location":"design/application/","title":"Overview","text":""},{"location":"design/application/#identity-and-access-management-iam","title":"Identity and Access Management (IAM)","text":"<p>IAM is a framework of policies and technologies ensuring that the right individuals in an enterprise have appropriate access to technology resources. It involves authentication, authorization, and user lifecycle management, ensuring that only authorized users can access specific applications and data.</p> <p>IAM helps organizations control user identities and their permissions in a secure and efficient manner. It includes authentication mechanisms such as passwords, multi-factor authentication (MFA), and biometrics to verify users before granting them access. Authorization defines what actions a user can perform, such as read, write, or admin privileges on a resource. Together, these processes mitigate security risks, ensuring that only legitimate users can access sensitive resources.</p> <p>Key components of IAM include:</p> <ol> <li>User Management: Creating, modifying, and deleting user accounts, including roles and permissions.</li> <li>Authentication: Methods like single sign-on (SSO), MFA, and password policies for secure user access.</li> <li>Authorization: Defining roles and access levels to restrict user actions within systems.</li> <li>Identity Federation: Allowing users to log in using credentials from another trusted system, such as social logins or enterprise identity providers.</li> <li>Access Governance: Monitoring and auditing access to ensure compliance with security policies.</li> </ol> <p>A well-implemented IAM strategy enhances security, improves operational efficiency, and ensures compliance with regulatory requirements. It minimizes the risk of unauthorized access, insider threats, and data breaches. Modern IAM solutions are essential for cloud-based environments where organizations need to manage access across various applications and devices securely.</p> <p>In Excell Employee App KeyCloak is proposed for implementation.</p>"},{"location":"design/application/#microservices-architecture","title":"Microservices Architecture","text":""},{"location":"design/application/#short-overview","title":"Short Overview","text":"<p>Microservices architecture is a modern software design approach that structures an application as a collection of small, independent services that communicate with each other through well-defined APIs. Unlike traditional monolithic architectures, where all components are tightly coupled and deployed as a single unit, microservices are loosely coupled and can be developed, deployed, and scaled independently.</p> <p>Each microservice is designed to handle a specific business capability, such as user authentication, ticket processing, or notification handling. These services interact over lightweight communication protocols like REST.</p> <p>Microservices promote agility, scalability, and resilience, making them a preferred choice for cloud-native applications, DevOps workflows, and enterprise-level solutions.</p>"},{"location":"design/application/#advantages","title":"Advantages","text":"Feature Description Scalability Microservices can be scaled independently based on demand, allowing critical services like payment processing to receive more resources without affecting the rest of the system. Fault Isolation &amp; Resilience Failures in one microservice do not impact the entire system, ensuring better fault tolerance and graceful degradation through independent service operations. Faster Development &amp; Deployment Parallel development of microservices enables faster release cycles, while CI/CD pipelines streamline deployment without requiring full system redeployments. Technology Flexibility Different microservices can use varied programming languages, databases, and frameworks, allowing teams to choose the most suitable technology for each service. Improved Maintainability &amp; Modularity With each microservice handling a specific function, the codebase remains smaller and more manageable, making debugging and updates simpler. Enhanced Security &amp; Compliance Sensitive data can be isolated within specific services, reducing system-wide security risks, while compliance requirements can be enforced at a granular level. Better Resource Utilization Deployment in containers (Docker, Kubernetes) ensures optimal resource allocation, with targeted load balancing preventing unnecessary overhead. <p>The microservices in Excell Employee ecosystem are discussed here</p>"},{"location":"design/application/iam/","title":"Keycloak","text":""},{"location":"design/application/iam/#background","title":"Background","text":"<p>Keycloak is an open-source identity and access management (IAM) solution that provides authentication and authorization services for applications. Developed by Red Hat, Keycloak simplifies user authentication and security, offering features like Single Sign-On (SSO) and role-based access control (RBAC).</p> <p>Organizations can configure Keycloak to provide secure authentication without building their own authentication mechanisms.</p> <p>Keycloak\u2019s notable features applicable for Employee App:</p> <ol> <li>Single Sign-On (SSO): Allows users to log in once and access multiple applications without re-authenticating.</li> <li>Multi-Factor Authentication (MFA): Enhances security by requiring additional authentication steps.</li> <li>Fine-Grained Access Control: Uses role-based access control (RBAC) and attribute-based access control (ABAC) to enforce security policies.</li> <li>Extensibility: Offers the ability to customize authentication flows, login screens, and user session handling.</li> </ol> <p>Keycloak operates using a realm-based structure, where each realm represents an isolated security domain. Users, roles, and clients (applications) exist within realms, enabling granular control over authentication and authorization policies.</p> <p>The next section will explore how Keycloak is implemented within Excell to manage authentication and authorization effectively.</p>"},{"location":"design/application/iam/#keycloak-implementation-for-excell","title":"Keycloak Implementation for Excell","text":""},{"location":"design/application/iam/#scopes-and-authorization-strategy","title":"Scopes and Authorization Strategy","text":"<p>In Excell's implementation of IAM, access control is managed through scopes, which define the features available to a user. These scopes are included as part of the authentication token issued by Keycloak. However, data-level authorizations\u2014such as determining which users fall under a specific hierarchy\u2014are handled separately within the database. This ensures that IAM remains focused on authentication and high-level authorization, while finer data access controls are managed dynamically by the application.</p> <p>For instance, scopes like <code>view.all</code> allow a user to see reports for users under them, but IAM itself does not determine who these users are. Instead, the system retrieves this hierarchy from the database based on business logic. This separation ensures flexibility and efficiency in access control. A more detailed discussion on data-level authorization is discussed here.</p>"},{"location":"design/application/iam/#scope-based-implementation","title":"Scope-Based Implementation","text":"<p>Each functional area in Excell is governed by a predefined set of scopes that dictate user permissions. These scopes are attached to user roles within Keycloak and included in the access token issued upon authentication. Below are the key scopes defined for different modules:</p>"},{"location":"design/application/iam/#attendance-management","title":"Attendance Management","text":"<ul> <li><code>mark.self</code> \u2192 Allows the user to mark their own attendance.</li> <li><code>view.self</code> \u2192 Allows the user to view their own attendance records.</li> <li><code>view.all</code> \u2192 Allows the user to view the attendance report of users under them.</li> </ul>"},{"location":"design/application/iam/#customer-operations","title":"Customer Operations","text":"<ul> <li><code>caf.create</code> \u2192 Grants permission to create a new customer CAF (Customer Application Form).</li> <li><code>caf.view.self</code> \u2192 Allows the user to view CAF records associated with them.</li> <li><code>caf.view.all</code> \u2192 Allows the user to view all CAF records of users under them.</li> </ul>"},{"location":"design/application/iam/#support-ticketing","title":"Support Ticketing","text":"<ul> <li><code>ticket.create</code> \u2192 Allows the user to create a new support ticket.</li> <li><code>ticket.close</code> \u2192 Grants permission to close tickets assigned to the user.</li> <li><code>ticket.view</code> \u2192 Allows the user to view their own tickets.</li> <li><code>ticket.view.all</code> \u2192 Allows the user to view tickets created by users under them.</li> </ul>"},{"location":"design/application/iam/#user-profile-management","title":"User Profile Management","text":"<ul> <li><code>profile.view.self</code> \u2192 Allows the user to view their own profile details.</li> <li><code>profile.modify.self</code> \u2192 Grants permission to modify their own profile.</li> </ul>"},{"location":"design/application/iam/#implementation-example","title":"Implementation Example","text":"<p>The implementation follows a role-based approach where roles are assigned to users, and these roles contain specific scopes. When a user logs in, Keycloak issues an access token containing the scopes granted to that user. The application then extracts these scopes and enforces access control accordingly.</p> <p>For example, when a manager accesses the attendance report, the system:</p> <ol> <li>Extracts the user's scopes from the token.</li> <li>Checks if <code>view.all</code> is present.</li> <li>If <code>view.all</code> is available, fetches the list of users under the manager from the database.</li> <li>Displays attendance data only for those users.</li> </ol> <p>This ensures that while IAM defines who has the permission to view certain data, the actual data retrieval logic remains separate and dynamic.</p> <p>We will expand further in the next section to discuss role-based assignments, token validation, and a real-world request-response cycle using Keycloak.</p>"},{"location":"design/application/ms/","title":"Microservices","text":""},{"location":"design/application/ms/#microservices-in-excells-architecture","title":"Microservices in Excell's Architecture","text":"<p>To ensure scalability, modularity, and flexibility in its system design. Functionalities are divided into independent services, each responsible for a specific domain. This approach allows to develop, deploy, and scale services independently, improving performance and maintainability.</p> <p>At the core of microservices ecosystem is IAM, which governs authentication and authorization using Keycloak. Additional services handle business logic, notifications, storage, external integrations, and system observability.</p> <p>Each microservice operates as a self-contained unit, communicating with others through lightweight APIs. This architecture not only enhances reliability but also enables seamless horizontal scaling, ensuring optimal performance even under high workloads.</p> <p>The following table provides an overview of the key microservices in Excell\u2019s architecture:</p> Microservice Description IAM Service Keycloak with PostgreSQL for identity and access management. IAM Admin API Service Exposes admin APIs for creating, deleting users, managing groups, and assigning roles. Core API Service Backend API for the user interface and mobile app. Notification Service Aggregator for sending SMS, mobile notifications, emails, and alerts. Storage Service Exposes APIs for adding, viewing, and managing files. External API Service Interface for external APIs like Aadhaar authentication. Observability Service Uses Fluent Bit, Prometheus, and Grafana for centralized logging and server performance monitoring. <p>Diagram</p>"}]}